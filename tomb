select unnest(array[('1',2),('3',4)])


create table teszt (
	teszt_id serial primary key,
	name_of_people varchar(64),
	age integer	
);

select * from teszt

insert into teszt(name_of_people,age)

select unnest(array[('1',2),('3',4)])
-----ez működik
WITH data AS (
    SELECT '{ {"alma", 2}, {"FONT", 2} }'::text[] AS arr
)
insert into teszt(name_of_people,age)
SELECT 
    arr[i][1] AS aspect, 
    arr[i][2]::int AS preference
FROM 
    data, 
    generate_subscripts((SELECT arr FROM data), 1) i
;

-------------------------
WITH data AS (
    SELECT array[array['1',2],array['3',4]] AS arr
)
--insert into teszt(name_of_people,age)
select xmlconcat('<?xml version="1.1"?>',xmlelement(name foo,xmlforest(aspect as teszt1)))::text from (
SELECT 
    arr[i][1] AS aspect, 
    arr[i][2]::int AS preference
FROM 
    data, 
    generate_subscripts((SELECT arr FROM data), 1) i) t
;

SELECT xmlconcat('<?xml version="1.1"?><books/>', '<book/>');
-----------------------------------
--create type tesz_t as (s1 text, s2 text, s3 text);

select * from unnest(
	'{"(alma,banan,citrom)",
"(alma2,banan2,citrom2)"
}'::tesz_t[])

--json list to tabla
select * from json_populate_recordset(null::tesz_t,'[{"s1":"valami1","s2":null,"s3":"valami3"}]')

----------------xml tag-et készítő function.
drop function create_xml_tag;
create function create_xml_tag(tag_name text,xml_data text)
returns text as $$
declare sz text;
begin
		IF xml_data is null or xml_data='' then
			sz='';
		else
			-- sz='<'||tag_name||'>'||xml_data||'</'||tag_name||'>';
			sz=xmlelement(name tag_name,xml_data)::text;
		end if;
		return sz;
end;$$
LANGUAGE plpgsql;
--------------------------------
select *, create_xml_tag('alma',s1)||create_xml_tag('banan',s2)||create_xml_tag('citrom',s3)
	from (
select * from json_populate_recordset(null::tesz_t,'[{"s1":"valami1","s2":null,"s3":"valami3"}]')) t
